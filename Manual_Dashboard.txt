Manual del Código de Análisis y Visualización de Siniestros Viales
1. Descripción General
Este código Python utiliza las bibliotecas pandas, plotly, dash y geopandas para analizar datos de siniestros viales provenientes de un archivo Excel y visualizarlos en un dashboard interactivo web creado con Dash. El objetivo es proporcionar una herramienta para explorar diferentes aspectos de los siniestros, como tipos de vehículos involucrados, características de los siniestros, demografía de los actores viales y patrones geográficos y temporales.

2. Dependencias
    Para ejecutar este código, necesitas tener instaladas las siguientes bibliotecas de Python:
        •	pandas
        •	plotly
        •	dash
        •	geopandas
        •	numpy
        •	dash-bootstrap-components
Puedes instalarlas usando pip:
pip install pandas plotly dash geopandas numpy dash-bootstrap-components

3. Carga de Datos (cargar_datos function )
    Esta función es responsable de cargar todos los datos necesarios para el análisis.
        •	Archivo Excel: Lee múltiples hojas (Vehiculos_Desagregados, Caracterización del Siniestro, Caracterización Actores Viales,              Demografía Involucrados, Datos Geográficos y Temporales) del archivo BD_Dashboard.xlsx.
        •	Shapefile: Carga un archivo shapefile de comunas desde Comunas/COMUNAS_UNIDAS.shp para análisis geográfico.
        •	Limpieza de Coordenadas: Llama a la función limpiar_coordenadas para limpiar y convertir las columnas de latitud y longitud             en los DataFrames relevantes.
        •	GeoDataFrame: Crea un GeoDataFrame (gdf_puntos) a partir de las coordenadas de los vehículos, asegurando que el sistema de              referencia de coordenadas (CRS) coincida con el del shapefile de comunas.
        •	Salida: Devuelve un diccionario que contiene todos los DataFrames cargados y el GeoDataFrame de comunas.

4. Funciones Auxiliares (Creación de Gráficos)
    El código define varias funciones auxiliares para generar diferentes tipos de gráficos con Plotly de manera estandarizada:
        •	limpiar_coordenadas(df): Limpia las columnas 'LATITUD' y 'LONGITUD' de un DataFrame, eliminando caracteres no numéricos,                reemplazando comas por puntos y convirtiendo a tipo numérico. Elimina filas con coordenadas inválidas.
        •	crear_grafico_barras(...): Genera un gráfico de barras vertical. Puede trabajar con datos crudos (calculando conteos) o                 datos ya agregados. Muestra porcentajes en el texto de la barra y en el hover.
        •	crear_grafico_apilado(...): Crea un gráfico de barras apiladas, útil para comparar la composición de categorías.
        •	crear_grafico_barras_horizontal(...): Genera un gráfico de barras horizontal, ordenado por valor. Puede mostrar porcentajes opcionalmente.
        •	crear_grafico_comparativo(...): Crea gráficos de barras agrupadas o apiladas para comparar múltiples columnas numéricas a               través de una categoría. Puede manejar ordenamiento específico de categorías (como meses) y un modo especial (modo_total)               para mostrar solo barras totales horizontales.
        •	crear_histograma(...): Genera un histograma para visualizar la distribución de una variable numérica. Permite calcular                  automáticamente el número de bins (usando la regla de Friedman-Diaconis) o especificarlo manualmente. Puede filtrar por una             categoría y subcategoría.
        •	crear_boxplot(...): Crea un diagrama de cajas y bigotes (boxplot) para comparar la distribución de una variable numérica                entre diferentes categorías.
        •	grafico_comparativo_sencillo(...): Una versión simplificada para crear gráficos de barras agrupadas a partir de un                      DataFrame que ya contiene la categoría y el valor.
        •	crear_sunburst_chart(...): Genera un gráfico Sunburst para visualizar datos jerárquicos.

5. Creación Centralizada de Gráficos (crear_graficos function )
    Esta función orquesta la creación de todas las visualizaciones necesarias para el dashboard.
        •	Entrada: Recibe el diccionario de datos cargados por cargar_datos.
        •	Proceso: 
            o	Define órdenes específicos para meses y días de la semana.
            o	Llama a las funciones auxiliares de creación de gráficos con los DataFrames y columnas correspondientes para generar visualizaciones sobre: 
                	Distribución de vehículos por clase y servicio.
                	Combinación de clase de vehículo y servicio.
                	Evolución mensual por clase de vehículo.
                	Frecuencia de tipos de siniestros.
                	Comparación mensual de heridos y muertos.
                	Actores viales involucrados (horizontal).
                	Comparación total de heridos vs muertos (horizontal).
                	Distribución y género de actores viales.
                	Distribución de edad de actores viales (boxplot e histogramas por tipo).
                	Demografía general (edad, género, edad vs género).
                	Distribución temporal (mes, día, hora).
                	Comparación horaria entre semana vs fin de semana.
                	Distribución de accidentes por día y comuna (Top 3) en un Sunburst.
                	Distribución horaria por cada día de la semana.
            •	Salida: Devuelve una lista que contiene todas las figuras de Plotly generadas.
            
6. Aplicación Dash (crear_aplicacion function )
    Esta función construye y configura la aplicación web interactiva usando Dash y Dash Bootstrap Components.
        •	Inicialización: Crea una instancia de la aplicación Dash con el tema Bootstrap.
        •	Figuras: Recibe la lista de figuras creadas por crear_graficos. Ajusta autosize=True para todas las figuras.
        •	Estilos: Define diccionarios de estilos CSS para aplicar una apariencia consistente a los títulos y secciones.
        •	Layout: 
            o	Utiliza dbc.Container como contenedor principal.
            o	Define un título principal.
            o	Organiza el contenido en pestañas principales (dbc.Tabs) para Vehículos, Siniestros, Actores, Demografía, Temporal y                    Mapas.
            o	La pestaña "Temporal" contiene sub-pestañas para "Temporalidad" y "Por Día".
            o	Utiliza la función crear_seccion para generar bloques estandarizados que contienen un título de sección y los gráficos                  correspondientes.
            o	La pestaña "Mapas" incluye un menú desplegable (dbc.DropdownMenu) para seleccionar diferentes mapas HTML y un                           html.Iframe para mostrarlos. También incluye un área para texto descriptivo dinámico.
        •	Interactividad (Callbacks): 
            o	Redimensionamiento: Un clientside_callback asegura que los gráficos se redimensionen correctamente cuando se cambia de                  pestaña.
            o	Actualización de Mapas: Un callback actualiza el atributo src del Iframe según el mapa seleccionado en el menú                          desplegable.
            o	Actualización de Texto: Otro callback actualiza el texto descriptivo debajo del mapa según la selección.
        •	Salida: Devuelve el objeto app de Dash configurado.

Asegúrate de que el archivo BD_Dashboard.xlsx y la carpeta Comunas con el shapefile estén en el mismo directorio que el script, o ajusta las rutas en la función cargar_datos. Los mapas HTML referenciados también deben estar en la subcarpeta assets.
